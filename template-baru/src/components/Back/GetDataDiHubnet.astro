---
import axios from "axios";
import { useState, useEffect } from "react";

const cookieHeader = Astro.request.headers.get("cookie") || "";
const cookies = Object.fromEntries(
  cookieHeader.split(/; */).map(c => {
    const [key, ...v] = c.split("=");
    return [key, v.join("=")];
  })
);
const token = cookies["access_token"];

// Buat tanggal hari ini dalam format YYYY-MM-DD
const today = new Date().toISOString().split("T")[0];

interface HubnetData {
  data: {
    AWB_NO: string;
    FLT_NUMBER: string;
    FLT_DATE: string;
    ORI: string;
    DEST: string;
    T: string;
    K: string;
    CH_WEIGHT: string;
    IS_INTERNATIONAL: number;
    IS_EKSPOR: number;
  }[];
}

let initialData: HubnetData | null = null;
try {
  const apiInstance = axios.create({
    baseURL: import.meta.env.PUBLIC_BACKEND_PATH,
    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" }
  });

  const res = await apiInstance.get("/hubnet/get-data-terkirim/", {
    params: { flt_date: today, page: 1, per_page: 10 }
  });
  initialData = res.data;
} catch (err) {
  const message = err instanceof Error ? err.message : String(err);
  console.error("Gagal memuat data hubnet:", message);
}
---

<div class='col-md'>
  <div class='card mb-4'>
    <div class='card-header header-elements'>
      <span class='me-2'>Data Hubnet Terkirim</span>
      <div class='card-header-elements ms-auto'>
        <input id='searchInput' type='text' class='form-control form-control-sm' placeholder='Cari data...' />
      </div>
    </div>

    <div class='card-body'>
      <div id='hubnetTable' class='table-responsive text-nowrap'>
        <table class='table table-sm table-hover'>
          <thead class='table-light'>
            <tr>
              <th>AWB_NO</th>
              <th>FLT_NUMBER</th>
              <th>FLT_DATE</th>
              <th>ORI</th>
              <th>DEST</th>
              <th>T</th>
              <th>K</th>
              <th>CH_WEIGHT</th>
              <th>IS_INTERNATIONAL</th>
              <th>IS_EKSPOR</th>
            </tr>
          </thead>
          <tbody id='dataBody' class='table-border-bottom-0'>
            {
              initialData?.data?.map(item => (
                <tr>
                  <td>{item.AWB_NO}</td>
                  <td>{item.FLT_NUMBER}</td>
                  <td>{item.FLT_DATE}</td>
                  <td>{item.ORI}</td>
                  <td>{item.DEST}</td>
                  <td>{item.T}</td>
                  <td>{item.K}</td>
                  <td>{item.CH_WEIGHT}</td>
                  <td>
                    <span class='badge bg-label-info'>
                      {item.IS_INTERNATIONAL === 1 ? "INTERNATIONAL" : "DOMESTIK"}
                    </span>
                  </td>
                  <td>
                    <span class='badge bg-label-primary'>{item.IS_EKSPOR === 1 ? "EKSPORT" : "IMPORT"}</span>
                  </td>
                </tr>
              )) || (
                <tr>
                  <td colspan='10' class='text-center text-muted'>
                    Tidak ada data
                  </td>
                </tr>
              )
            }
          </tbody>
        </table>

        <!-- Pagination -->
        <nav class='mt-3' aria-label='Page navigation'>
          <ul id='pagination' class='pagination pagination-sm mb-0'>
            <li class='page-item'>
              <a class='page-link' href='#' data-page='prev'>&laquo;</a>
            </li>
            <li class='page-item active'><a class='page-link' href='#' data-page='1'>1</a></li>
            <li class='page-item'><a class='page-link' href='#' data-page='2'>2</a></li>
            <li class='page-item'><a class='page-link' href='#' data-page='3'>3</a></li>
            <li class='page-item'>
              <a class='page-link' href='#' data-page='next'>&raquo;</a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  const backend = import.meta.env.PUBLIC_BACKEND_PATH;
  const token = "{cookies.auth_token}";
  const today = "{today}";
  let currentPage = 1;

  async function fetchData(page = 1) {
    try {
      const res = await fetch(`${backend}/hubnet/get-data-terkirim/?flt_date=${today}&page=${page}&per_page=10`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      const json = await res.json();

      const tbody = document.getElementById("dataBody");
      tbody.innerHTML = json.data
        .map(
          item => `
          <tr>
            <td>${item.AWB_NO}</td>
            <td>${item.FLT_NUMBER}</td>
            <td>${item.FLT_DATE}</td>
            <td>${item.ORI}</td>
            <td>${item.DEST}</td>
            <td>${item.T}</td>
            <td>${item.K}</td>
            <td>${item.CH_WEIGHT}</td>
            <td><span class="badge bg-label-info">${
              item.IS_INTERNATIONAL === 1 ? "INTERNATIONAL" : "DOMESTIK"
            }</span></td>
            <td><span class="badge bg-label-primary">${item.IS_EKSPOR === 1 ? "EKSPORT" : "IMPORT"}</span></td>
          </tr>`
        )
        .join("");
    } catch (e) {
      console.error("Fetch error:", e);
    }
  }

  // pagination click
  document.querySelectorAll("#pagination a[data-page]").forEach(el => {
    el.addEventListener("click", e => {
      e.preventDefault();
      const pageAttr = e.target.dataset.page;
      if (pageAttr === "prev" && currentPage > 1) currentPage--;
      else if (pageAttr === "next") currentPage++;
      else currentPage = parseInt(pageAttr);

      fetchData(currentPage);
      document.querySelectorAll("#pagination li").forEach(li => li.classList.remove("active"));
      const activeEl = document.querySelector(`#pagination a[data-page="${currentPage}"]`)?.parentElement;
      if (activeEl) activeEl.classList.add("active");
    });
  });
</script>
