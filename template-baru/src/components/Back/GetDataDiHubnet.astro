---
// Buat tanggal hari ini dalam format YYYY-MM-DD (dipakai di client)
const today = new Date().toISOString().split("T")[0];

interface HubnetData {
  data: {
    AWB_NO: string;
    FLT_NUMBER: string;
    FLT_DATE: string;
    ORI: string;
    DEST: string;
    T: string;
    K: string;
    CH_WEIGHT: string;
    IS_INTERNATIONAL: number;
    IS_EKSPOR: number;
    ref_id?: string | null;
  }[];
}

let initialData: HubnetData = { data: [] };
---

<div class='col-md'>
  <div class='card mb-4'>
    <div class='card-header header-elements'>
      <span class='me-2'>Data Hubnet Terkirim</span>
      <div class='card-header-elements ms-auto'>
        <input
          id='searc-by-date'
          type='date'
          class='form-control form-control-sm'
          placeholder='lihat data per tanggal'
        />
      </div>
    </div>

    <div class='card-body'>
      <div id='hubnetTable' class='table-responsive text-nowrap'>
        <table class='table table-sm table-hover'>
          <thead class='table-light'>
            <tr>
              <th>AWB_NO</th>
              <th>FLT_NUMBER</th>
              <th>FLT_DATE</th>
              <th>ORI</th>
              <th>DEST</th>
              <th>T</th>
              <th>K</th>
              <th>CH_WEIGHT</th>
              <th>REF ID</th>
              <th>IS_INTERNATIONAL</th>
              <th>IS_EKSPOR</th>
            </tr>
          </thead>
          <tbody id='dataBody' class='table-border-bottom-0'>
            {
              initialData?.data?.map(item => (
                <tr>
                  <td>{item.AWB_NO}</td>
                  <td>{item.FLT_NUMBER}</td>
                  <td>{item.FLT_DATE}</td>
                  <td>{item.ORI}</td>
                  <td>{item.DEST}</td>
                  <td>{item.T}</td>
                  <td>{item.K}</td>
                  <td>{item.CH_WEIGHT}</td>
                  <td>{item.ref_id ?? "-"}</td>
                  <td>
                    <span class='badge bg-label-info'>
                      {item.IS_INTERNATIONAL === 1 ? "INTERNATIONAL" : "DOMESTIK"}
                    </span>
                  </td>
                  <td>
                    <span class='badge bg-label-primary'>{item.IS_EKSPOR === 1 ? "EKSPORT" : "IMPORT"}</span>
                  </td>
                </tr>
              )) || (
                <tr>
                  <td colspan='11' class='text-center text-muted'>
                    Tidak ada data
                  </td>
                </tr>
              )
            }
          </tbody>
        </table>
      </div>
      <!-- Pagination -->
      <nav class='mt-3' aria-label='Page navigation'>
        <ul id='pagination' class='pagination pagination-sm mb-0'></ul>
      </nav>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  const backend = import.meta.env.PUBLIC_BACKEND_PATH;
  // Ambil token dari cookie di sisi klien
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(";").shift();
    return null;
  }
  const token = getCookie("access_token");
  function toInputDate(d) {
    const dt = d instanceof Date ? d : new Date(d);
    const yyyy = dt.getFullYear();
    const mm = String(dt.getMonth() + 1).padStart(2, "0");
    const dd = String(dt.getDate()).padStart(2, "0");
    return `${yyyy}-${mm}-${dd}`;
  }
  function toDMY(dateStr) {
    if (!dateStr) return "";
    const [y, m, d] = dateStr.split("-");
    return `${d}-${m}-${y}`;
  }

  const todayInput = toInputDate(new Date()); // YYYY-MM-DD
  let selectedDateInput = todayInput; // YYYY-MM-DD
  let selectedDateDMY = toDMY(selectedDateInput); // DD-MM-YYYY
  let currentPage = 1;
  const perPage = 10;

  function renderRows(rows = []) {
    const tbody = document.getElementById("dataBody");
    if (!rows.length) {
      tbody.innerHTML = `<tr><td colspan="11" class="text-center text-muted">Tidak ada data</td></tr>`;
      return;
    }
    tbody.innerHTML = rows
      .map(
        item => `
        <tr>
          <td>${item.AWB_NO ?? "-"}</td>
          <td>${item.FLT_NUMBER ?? "-"}</td>
          <td>${item.FLT_DATE ?? "-"}</td>
          <td>${item.ORI ?? "-"}</td>
          <td>${item.DEST ?? "-"}</td>
          <td>${item.T ?? "-"}</td>
          <td>${item.K ?? "-"}</td>
          <td>${item.CH_WEIGHT ?? "-"}</td>
          <td>${item.ref_id ?? "-"}</td>
          <td><span class="badge bg-label-info">${
            item.IS_INTERNATIONAL === 1 ? "INTERNATIONAL" : "DOMESTIK"
          }</span></td>
          <td><span class="badge bg-label-primary">${item.IS_EKSPOR === 1 ? "EKSPORT" : "IMPORT"}</span></td>
        </tr>`
      )
      .join("");
  }

  function buildPageItem(label, page, disabled = false, active = false, aria = "") {
    return `
      <li class="page-item ${disabled ? "disabled" : ""} ${active ? "active" : ""}">
        <a class="page-link" href="#" data-page="${page}" ${aria}>${label}</a>
      </li>`;
  }

  function renderPagination(pagination) {
    const ul = document.getElementById("pagination");
    if (!pagination) {
      ul.innerHTML = "";
      return;
    }
    const { current_page, last_page } = pagination;
    let html = "";
    // Prev
    html += buildPageItem("&laquo;", Math.max(1, current_page - 1), current_page === 1, false, 'aria-label="Previous"');
    // Numbers (simple: show up to 7 pages window)
    const windowSize = 7;
    let start = Math.max(1, current_page - 3);
    let end = Math.min(last_page, start + windowSize - 1);
    if (end - start + 1 < windowSize) {
      start = Math.max(1, end - windowSize + 1);
    }
    if (start > 1) {
      html += buildPageItem("1", 1, false, current_page === 1);
      if (start > 2) html += `<li class="page-item disabled"><span class="page-link">…</span></li>`;
    }
    for (let p = start; p <= end; p++) {
      html += buildPageItem(String(p), p, false, p === current_page);
    }
    if (end < last_page) {
      if (end < last_page - 1) html += `<li class="page-item disabled"><span class="page-link">…</span></li>`;
      html += buildPageItem(String(last_page), last_page, false, current_page === last_page);
    }
    // Next
    html += buildPageItem(
      "&raquo;",
      Math.min(last_page, current_page + 1),
      current_page === last_page,
      false,
      'aria-label="Next"'
    );
    ul.innerHTML = html;
  }

  function fetchData(page = 1) {
    $.ajax({
      url: `${backend}/hubnet/get-data-terkirim/`,
      method: "GET",
      data: { flt_date: selectedDateDMY, page, per_page: perPage },
      headers: token ? { Authorization: `Bearer ${token}` } : {},
      success: function (json) {
        console.log("Data fetched:", json);
        currentPage = json?.pagination?.current_page || page;
        renderRows(json?.data || []);
        renderPagination(json?.pagination);
      },
      error: function (xhr, status, err) {
        console.error("AJAX error:", status, err);
      }
    });
  }

  function setupClient() {
    // Init date picker
    const dateInput = document.getElementById('searc-by-date');
    if (dateInput) {
      dateInput.value = selectedDateInput; // set to today
      dateInput.addEventListener('change', (e) => {
        const v = e.target.value; // YYYY-MM-DD
        if (!v) return;
        selectedDateInput = v;
        selectedDateDMY = toDMY(v);
        currentPage = 1;
        fetchData(currentPage);
      });
    }
    // pagination click (event delegation)
    document.getElementById("pagination").addEventListener("click", e => {
      const target = e.target.closest("a[data-page]");
      if (!target) return;
      e.preventDefault();
      const page = parseInt(target.getAttribute("data-page"));
      if (!isNaN(page)) {
        fetchData(page);
      }
    });

    // Muat data awal di client juga (opsional untuk sinkron dengan SSR)
    fetchData(currentPage);
  }

  if (window.jQuery) {
    setupClient();
  } else {
    window.addEventListener("load", setupClient);
  }
</script>
