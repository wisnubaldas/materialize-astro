---
interface Props {
  column: string[];
  dataPath: string;
  addColumn?: string[];
  filterColumn?: string[];
}
const { column, dataPath, addColumn = [], filterColumn = [] } = Astro.props;
const tableId = "dt_" + Math.floor(Math.random() * 10000);
const checkAdaFilterApaNgga = filterColumn.length;
---

<!-- Ajax Sourced Server-side --><!--Search Form -->
<div class="card">
  {
    checkAdaFilterApaNgga > 0 && (
      <div class="card-body">
        <form class="dt_adv_search" method="POST">
          <div class="row">
            <div class="col-12">
              <div class="row g-3 form-control-sm">
                <div class="col-12 col-sm-6 col-lg-4">
                  <div class="d-grid gap-2">
                    <button
                      type="button"
                      class="btn btn-outline-warning"
                      id="reset-form"
                    >
                      Reset Form
                    </button>
                  </div>
                </div>
                {filterColumn.map((item) => {
                  if (item == "TANGGAL")
                    return (
                      <div class="col-12 col-sm-6 col-lg-4">
                        <div class="form-floating form-floating-outline">
                          <input
                            type="text"
                            class="form-control dt-date flatpickr-range dt-input"
                            data-column="5"
                            placeholder="StartDate to EndDate"
                            data-column-index="4"
                            id={item}
                            name="dt_date"
                          />
                          <label for="filter-date">{item}</label>
                        </div>
                        <input
                          type="hidden"
                          class="start_date"
                          id={"start-" + item}
                        />
                        <input
                          type="hidden"
                          class="end_date"
                          id={"end-" + item}
                        />
                      </div>
                    );
                  return (
                    <div class="col-12 col-sm-6 col-lg-4">
                      <div class="form-floating form-floating-outline">
                        <input
                          type="text"
                          class="form-control dt-input dt-full-name"
                          data-column={item}
                          placeholder={item}
                          data-column-index="1"
                          id={item}
                        />
                        <label for={item}>{item}</label>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </form>
      </div>
    )
  }

  <div class="card-body">
    <div class="card-datatable text-nowrap pt-0 m-2 table-responsive">
      <table
        class="datatables-ajax table table-bordered table-sm tabel-striped"
        id={tableId}
        data-idnya={tableId}
        data-path={dataPath}
      >
        <thead class="table-primary">
          <tr>
            {addColumn?.map((col) => <th>#</th>)}
            {column.map((col) => <th>{col.replace(/_/g, " ")}</th>)}
          </tr>
        </thead>
      </table>
    </div>
  </div>
</div>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<!-- masukin ke object window buat akalin ssr astro -->
<script define:vars={{ column, addColumn, filterColumn }} defer>
  const add_column = addColumn.map((col) => {
    if (col.includes("boolean:")) {
      let parts = col.split(":");
      return {
        data: "",
        defaultContent: "",
        orderable: false,
        searchable: false,
        render: (data, type, row) => {
          if (row[parts[1]] == 1) {
            return `<span class="badge bg-success">Sukses</span>`;
          } else {
            return `<span class="badge bg-danger">Gagal</span>`;
          }
        },
      };
    } else {
      return {
        data: "#",
        defaultContent: "",
        orderable: false,
        searchable: false,
      };
    }
  });

  window.TBLComponent = {};
  const coloumn = column.map((col) => {
    return {
      data: col,
    };
  });
  window.TBLComponent.column = [...add_column, ...coloumn];
  window.TBLComponent.filterColumn = filterColumn;
</script>

<!-- jalanin datatables nya -->
<script>
  import $ from "~/assets/js/ajax-setup";
  import { getCookie, INV } from "~/assets/js/module/utils";
  import "~/components/DatatablesComponent";

  let el = document.querySelector(".datatables-ajax");
  const path = (el as HTMLElement).dataset.path;
  let idNya = (el as HTMLElement).dataset.idnya;
  let dt_ajax_table = $("#" + idNya);
  const filterColumn = (window as any).TBLComponent.filterColumn;

  document.addEventListener("DOMContentLoaded", function () {
    // console.log(window);

    if (dt_ajax_table.length) {
      let dt_ajax = dt_ajax_table.DataTable({
        processing: true,
        serverSide: true, // kalau backend handle paging/sorting/filtering
        responsive: {
          details: {
            type: "column",
            target: 0,
            renderer: function (api: any, rowIdx: any, columns: any[]) {
              let hiddenCols = columns.filter(
                (col: { hidden: any }) => col.hidden
              );
              if (!hiddenCols.length) return false;

              let headerRow = "";
              let dataRow = "";
              let tables = "";

              hiddenCols.forEach(
                (col: { title: any; data: any }, i: number) => {
                  headerRow += `<th>${col.title}</th>`;
                  dataRow += `<td>${col.data}</td>`;

                  // setiap 3 kolom, tutup table dan reset
                  if ((i + 1) % 5 === 0 || i === hiddenCols.length - 1) {
                    tables += `
                      <table class="table table-bordered table-sm mb-2">
                        <thead class="table-success"><tr>${headerRow}</tr></thead>
                        <tbody><tr>${dataRow}</tr></tbody>
                      </table>`;
                    headerRow = "";
                    dataRow = "";
                  }
                }
              );

              return $("<div/>").append(tables);
            },
          },
        },
        columnDefs: [
          {
            className: "control",
            orderable: false,
            targets: 0,
            render: function () {
              return '<span class="mdi mdi-plus-minus-box mdi-spin text-primary"></span>';
            },
          },
        ],
        columns: (window as any).TBLComponent.column,
        ajax: {
          url: INV.back_path + path,
          type: "POST",
          contentType: "application/json",
          data: function (d: any) {
            // d = object bawaan DataTables (draw, start, length, dll.)
            d.filters = {};
            filterColumn.forEach((col: string) => {
              d.filters[col] = $(`#${col}`).val();
            });

            // console.log("Data yang dikirim ke server:", d);
            return JSON.stringify(d);
          },
          beforeSend: function (xhr: any, settings: any) {
            const token = getCookie("auth_token");
            if (token) {
              xhr.setRequestHeader("Authorization", "Bearer " + token);
            }
          },
          complete: function () {
            // Reset form dengan class "dt_adv_search"
            // $(".dt_adv_search")[0].reset(); // jika ini adalah <form>
            // atau $(".dt_adv_search").val(""); jika input biasa
          },
        },
      });
      // ubah icon saat expand/collapse
      dt_ajax.on(
        "responsive-display",
        function (
          e: any,
          datatable: any,
          row: { node: () => any },
          showHide: any,
          update: any
        ) {
          let icon = $(row.node()).find("td.control i");
          if (showHide) {
            icon.removeClass("fa-plus").addClass("fa-minus");
          } else {
            icon.removeClass("fa-minus").addClass("fa-plus");
          }
        }
      );
      // event
      // Event listener untuk memicu refresh tabel saat input filter berubah
      const selector = filterColumn.map((col: any) => `#${col}`).join(", "); // kelompokan jadi satu selector
      const $filters = $(selector);
      $filters.each(function (this: HTMLElement) {
        if (this.id === "TANGGAL") {
          $(this).on("change", () => dt_ajax.draw());
          // jalanin flatfiker dulu
          // Initialize Flatpickr for date range
          $(this).flatpickr({
            mode: "single",
            dateFormat: "Y-m-d",
            onClose: function (
              selectedDates: string | any[],
              dateStr: any,
              instance: { formatDate: (arg0: any, arg1: string) => any }
            ) {
              // console.log(selectedDates);
            },
          });
        } else {
          $(this).on("keyup", () => dt_ajax.draw());
        }
      });

      // Event listener untuk tombol refresh
      $("#refresh-table").on("click", function () {
        dt_ajax.draw();
      });
      // reset form
      $("#reset-form").on("click", function () {
        $(".dt_adv_search")[0].reset();
        dt_ajax.draw();
      });
    }
  });
</script>
<!--/ Ajax Sourced Server-side -->
