---
// Buat tanggal hari ini dalam format YYYY-MM-DD (dipakai di client)
const today = new Date().toISOString().split("T")[0];

interface HubnetData {
  data: {
    AWB_NO: string;
    FLT_NUMBER: string;
    FLT_DATE: string;
    ORI: string;
    DEST: string;
    T: string;
    K: string;
    CH_WEIGHT: string;
    IS_INTERNATIONAL: number;
    IS_EKSPOR: number;
  }[];
}

let initialData: HubnetData | null = null;
---

<div class='col-md'>
  <div class='card mb-4'>
    <div class='card-header header-elements'>
      <span class='me-2'>Data Hubnet Terkirim</span>
      <div class='card-header-elements ms-auto'>
        <input id='searchInput' type='text' class='form-control form-control-sm' placeholder='Cari data...' />
      </div>
    </div>

    <div class='card-body'>
      <div id='hubnetTable' class='table-responsive text-nowrap'>
        <table class='table table-sm table-hover'>
          <thead class='table-light'>
            <tr>
              <th>AWB_NO</th>
              <th>FLT_NUMBER</th>
              <th>FLT_DATE</th>
              <th>ORI</th>
              <th>DEST</th>
              <th>T</th>
              <th>K</th>
              <th>CH_WEIGHT</th>
              <th>IS_INTERNATIONAL</th>
              <th>IS_EKSPOR</th>
            </tr>
          </thead>
          <tbody id='dataBody' class='table-border-bottom-0'>
            {
              initialData?.data?.map(item => (
                <tr>
                  <td>{item.AWB_NO}</td>
                  <td>{item.FLT_NUMBER}</td>
                  <td>{item.FLT_DATE}</td>
                  <td>{item.ORI}</td>
                  <td>{item.DEST}</td>
                  <td>{item.T}</td>
                  <td>{item.K}</td>
                  <td>{item.CH_WEIGHT}</td>
                  <td>
                    <span class='badge bg-label-info'>
                      {item.IS_INTERNATIONAL === 1 ? "INTERNATIONAL" : "DOMESTIK"}
                    </span>
                  </td>
                  <td>
                    <span class='badge bg-label-primary'>{item.IS_EKSPOR === 1 ? "EKSPORT" : "IMPORT"}</span>
                  </td>
                </tr>
              )) || (
                <tr>
                  <td colspan='10' class='text-center text-muted'>
                    Tidak ada data
                  </td>
                </tr>
              )
            }
          </tbody>
        </table>

        <!-- Pagination -->
        <nav class='mt-3' aria-label='Page navigation'>
          <ul id='pagination' class='pagination pagination-sm mb-0'>
            <li class='page-item'>
              <a class='page-link' href='#' data-page='prev'>&laquo;</a>
            </li>
            <li class='page-item active'><a class='page-link' href='#' data-page='1'>1</a></li>
            <li class='page-item'><a class='page-link' href='#' data-page='2'>2</a></li>
            <li class='page-item'><a class='page-link' href='#' data-page='3'>3</a></li>
            <li class='page-item'>
              <a class='page-link' href='#' data-page='next'>&raquo;</a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  const backend = import.meta.env.PUBLIC_BACKEND_PATH;
  // Ambil token dari cookie di sisi klien
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  }
  const token = getCookie('access_token');
  const today = "{today}";
  let currentPage = 1;

  function fetchData(page = 1) {
    $.ajax({
      url: `${backend}/hubnet/get-data-terkirim/`,
      method: 'GET',
      data: { flt_date: today, page, per_page: 10 },
      headers: token ? { Authorization: `Bearer ${token}` } : {},
      success: function (json) {
        const tbody = document.getElementById('dataBody');
        tbody.innerHTML = (json.data || [])
          .map(
            item => `
            <tr>
              <td>${item.AWB_NO}</td>
              <td>${item.FLT_NUMBER}</td>
              <td>${item.FLT_DATE}</td>
              <td>${item.ORI}</td>
              <td>${item.DEST}</td>
              <td>${item.T}</td>
              <td>${item.K}</td>
              <td>${item.CH_WEIGHT}</td>
              <td><span class="badge bg-label-info">${
                item.IS_INTERNATIONAL === 1 ? 'INTERNATIONAL' : 'DOMESTIK'
              }</span></td>
              <td><span class="badge bg-label-primary">${
                item.IS_EKSPOR === 1 ? 'EKSPORT' : 'IMPORT'
              }</span></td>
            </tr>`
          )
          .join('');
      },
      error: function (xhr, status, err) {
        console.error('AJAX error:', status, err);
      }
    });
  }

  function setupClient() {
    // pagination click
    document.querySelectorAll('#pagination a[data-page]').forEach(el => {
      el.addEventListener('click', e => {
        e.preventDefault();
        const pageAttr = e.target.dataset.page;
        if (pageAttr === 'prev' && currentPage > 1) currentPage--;
        else if (pageAttr === 'next') currentPage++;
        else currentPage = parseInt(pageAttr);

        fetchData(currentPage);
        document
          .querySelectorAll('#pagination li')
          .forEach(li => li.classList.remove('active'));
        const activeEl = document.querySelector(
          `#pagination a[data-page="${currentPage}"]`
        )?.parentElement;
        if (activeEl) activeEl.classList.add('active');
      });
    });

    // Muat data awal di client juga (opsional untuk sinkron dengan SSR)
    fetchData(currentPage);
  }

  if (window.jQuery) {
    setupClient();
  } else {
    window.addEventListener('load', setupClient);
  }
</script>
